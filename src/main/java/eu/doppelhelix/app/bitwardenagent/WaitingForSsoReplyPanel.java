/*
 * Copyright 2025 matthias.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package eu.doppelhelix.app.bitwardenagent;

import eu.doppelhelix.app.bitwardenagent.impl.BitwardenAuthenticator;
import eu.doppelhelix.app.bitwardenagent.impl.UtilUI;
import java.lang.System.Logger;
import java.lang.System.Logger.Level;
import java.util.Collection;
import java.util.List;
import java.util.ResourceBundle;

/**
 *
 * @author matthias
 */
public class WaitingForSsoReplyPanel extends javax.swing.JPanel {

    private static final Logger LOG = System.getLogger(MethodSelectionPanel.class.getName());
    private static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle("eu/doppelhelix/app/bitwardenagent/Bundle");
    public static final String ACTION_CANCEL = "ACTION_CANCEL";

    /**
     * Creates new form WaitingForSsoReply
     */
    public WaitingForSsoReplyPanel(BitwardenAuthenticator authenticator) {
        initComponents();
        cancelButton.addActionListener((ae) -> {
            setWarnings(null);
            UtilUI.runOffTheEdt(
                    () -> authenticator.cancel(),
                    null,
                    (exception) -> {
                        setWarnings(List.of(RESOURCE_BUNDLE.getString("failedCancel")));
                        LOG.log(Level.WARNING, "Failed to cancel", exception);
                    }
            );
        });
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        warningScrollPane = new javax.swing.JScrollPane();
        warningTextPane = new javax.swing.JTextPane();
        cancelButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("eu/doppelhelix/app/bitwardenagent/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("waitingForSsoReply")); // NOI18N
        jLabel1.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jLabel1, gridBagConstraints);

        warningTextPane.setEditable(false);
        warningTextPane.setContentType("text/html"); // NOI18N
        warningTextPane.setAlignmentX(0.0F);
        warningTextPane.setAlignmentY(0.0F);
        warningTextPane.setName(""); // NOI18N
        warningScrollPane.setViewportView(warningTextPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 150;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(warningScrollPane, gridBagConstraints);

        cancelButton.setText(bundle.getString("cancelButton")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(cancelButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    public void setWarnings(Collection<String> texts) {
        StringBuilder message = new StringBuilder();
        if (texts != null && !texts.isEmpty()) {
            message.append("<html>");
            message.append("<ul style='color: #E50808; margin-left: 10px'>");
            for (String text : texts) {
                message.append("<li>");
                message.append(UtilUI.escapeXml(text));
                message.append("</li>");
            }
            message.append("</ul>");
        }
        warningTextPane.setText(message.toString());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane warningScrollPane;
    private javax.swing.JTextPane warningTextPane;
    // End of variables declaration//GEN-END:variables
}
